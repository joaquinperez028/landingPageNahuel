import { NextApiRequest, NextApiResponse } from 'next';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/googleAuth';
import dbConnect from '@/lib/mongodb';
import SiteConfig from '@/models/SiteConfig';
import Training from '@/models/Training';
import { verifyAdminAPI } from '@/lib/adminAuth';

/**
 * API para manejar la configuraci√≥n del sitio web
 * GET: Obtiene la configuraci√≥n actual
 * PUT: Actualiza la configuraci√≥n (solo administradores)
 */
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  await dbConnect();

  if (req.method === 'GET') {
    try {
      console.log('üîç [SITE-CONFIG] Iniciando obtenci√≥n de configuraci√≥n...');
      
      // Verificar que los modelos est√©n disponibles
      console.log('üìã [SITE-CONFIG] Verificando modelos disponibles...');
      console.log('üìã [SITE-CONFIG] SiteConfig disponible:', !!SiteConfig);
      console.log('üìã [SITE-CONFIG] Training disponible:', !!Training);
      
      let config;
      
      try {
        console.log('üîç [SITE-CONFIG] Intentando obtener configuraci√≥n con populate...');
        config = await SiteConfig.findOne().populate('cursos.destacados');
        console.log('‚úÖ [SITE-CONFIG] Configuraci√≥n obtenida con populate exitoso');
      } catch (populateError) {
        console.error('‚ùå [SITE-CONFIG] Error en populate, intentando sin populate:', populateError);
        
        // Si falla el populate, obtener sin populate
        config = await SiteConfig.findOne();
        console.log('‚ö†Ô∏è [SITE-CONFIG] Configuraci√≥n obtenida sin populate');
      }
      
      // Si no existe configuraci√≥n, crear una por defecto
      if (!config) {
        console.log('üÜï [SITE-CONFIG] No existe configuraci√≥n, creando por defecto...');
        config = new SiteConfig({
          heroVideo: {
            youtubeId: 'dQw4w9WgXcQ',
            title: 'Video de Presentaci√≥n',
            description: 'Conoce m√°s sobre nuestros servicios de trading',
            autoplay: true,
            muted: true,
            loop: true
          },
          learningVideo: {
            youtubeId: 'dQw4w9WgXcQ',
            title: 'Cursos de Inversi√≥n',
            description: 'Aprende a invertir desde cero con nuestros cursos especializados',
            autoplay: false,
            muted: true,
            loop: false
          },
          servicios: {
            orden: 1,
            visible: true
          },
          cursos: {
            orden: 2,
            visible: true,
            destacados: []
          }
        });
        await config.save();
        console.log('‚úÖ [SITE-CONFIG] Configuraci√≥n por defecto creada');
      }

      console.log('‚úÖ [SITE-CONFIG] Configuraci√≥n retornada exitosamente');
      res.status(200).json(config);
      
    } catch (error) {
      console.error('‚ùå [SITE-CONFIG] Error al obtener configuraci√≥n del sitio:', error);
      console.error('‚ùå [SITE-CONFIG] Stack trace:', error instanceof Error ? error.stack : 'No stack available');
      res.status(500).json({ error: 'Error interno del servidor' });
    }
  } else if (req.method === 'PUT') {
    try {
      console.log('üîÑ [SITE-CONFIG] Iniciando actualizaci√≥n de configuraci√≥n...');
      
      const adminVerification = await verifyAdminAPI(req, res);
      
      if (!adminVerification.isAdmin) {
        return res.status(adminVerification.error === 'No autorizado' ? 401 : 403)
          .json({ error: adminVerification.error });
      }

      const updateData = req.body;
      console.log('üìù [SITE-CONFIG] Datos de actualizaci√≥n recibidos');
      
      let config = await SiteConfig.findOne();
      
      if (!config) {
        console.log('üÜï [SITE-CONFIG] Creando nueva configuraci√≥n...');
        config = new SiteConfig(updateData);
      } else {
        console.log('üîÑ [SITE-CONFIG] Actualizando configuraci√≥n existente...');
        Object.assign(config, updateData);
      }

      await config.save();
      console.log('‚úÖ [SITE-CONFIG] Configuraci√≥n guardada');
      
      // Intentar populate solo si es seguro
      try {
        await config.populate('cursos.destacados');
        console.log('‚úÖ [SITE-CONFIG] Populate exitoso en actualizaci√≥n');
      } catch (populateError) {
        console.error('‚ö†Ô∏è [SITE-CONFIG] Error en populate durante actualizaci√≥n, continuando sin populate:', populateError);
      }

      console.log('‚úÖ [SITE-CONFIG] Actualizaci√≥n completada exitosamente');
      res.status(200).json(config);
      
    } catch (error) {
      console.error('‚ùå [SITE-CONFIG] Error al actualizar configuraci√≥n del sitio:', error);
      console.error('‚ùå [SITE-CONFIG] Stack trace:', error instanceof Error ? error.stack : 'No stack available');
      res.status(500).json({ error: 'Error interno del servidor' });
    }
  } else {
    res.setHeader('Allow', ['GET', 'PUT']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
} 