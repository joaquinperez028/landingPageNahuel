import type { NextApiRequest, NextApiResponse } from 'next';

/**
 * API para invalidar cach√© de turnos
 * POST: Invalida el cach√© y fuerza regeneraci√≥n
 */
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Configurar headers anti-cach√©
  res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
  res.setHeader('Pragma', 'no-cache');
  res.setHeader('Expires', '0');
  
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©todo no permitido' });
  }

  try {
    console.log('üîÑ Invalidando cach√© de turnos...');
    
    // Simular invalidaci√≥n de cach√©
    const timestamp = Date.now();
    
    return res.status(200).json({
      success: true,
      message: 'Cach√© invalidado exitosamente',
      timestamp,
      invalidatedAt: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Error al invalidar cach√©:', error);
    return res.status(500).json({ error: 'Error al invalidar cach√©' });
  }
} 