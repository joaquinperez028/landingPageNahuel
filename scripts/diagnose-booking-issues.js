const { MongoClient } = require('mongodb');
require('dotenv').config();

async function diagnoseBookingIssues() {
  console.log('üîç Diagn√≥stico de problemas con reservas de asesor√≠as\n');

  // 1. Verificar variables de entorno
  console.log('üìã 1. Verificando variables de entorno...');
  
  const requiredEnvVars = {
    'MONGODB_URI': process.env.MONGODB_URI,
    'GOOGLE_CLIENT_ID': process.env.GOOGLE_CLIENT_ID,
    'GOOGLE_CLIENT_SECRET': process.env.GOOGLE_CLIENT_SECRET,
    'ADMIN_GOOGLE_ACCESS_TOKEN': process.env.ADMIN_GOOGLE_ACCESS_TOKEN,
    'ADMIN_GOOGLE_REFRESH_TOKEN': process.env.ADMIN_GOOGLE_REFRESH_TOKEN,
    'GOOGLE_CALENDAR_ID': process.env.GOOGLE_CALENDAR_ID,
    'SMTP_HOST': process.env.SMTP_HOST,
    'SMTP_PORT': process.env.SMTP_PORT,
    'SMTP_USER': process.env.SMTP_USER,
    'SMTP_PASS': process.env.SMTP_PASS,
    'ADMIN_EMAIL': process.env.ADMIN_EMAIL
  };

  const missingVars = Object.entries(requiredEnvVars)
    .filter(([key, value]) => !value)
    .map(([key]) => key);

  if (missingVars.length > 0) {
    console.log('‚ùå Variables faltantes:', missingVars);
  } else {
    console.log('‚úÖ Todas las variables de entorno est√°n configuradas');
  }

  // 2. Verificar conexi√≥n a MongoDB
  console.log('\nüìä 2. Verificando conexi√≥n a MongoDB...');
  try {
    const client = new MongoClient(process.env.MONGODB_URI);
    await client.connect();
    console.log('‚úÖ Conexi√≥n a MongoDB exitosa');
    
    const db = client.db();
    
    // 3. Verificar colecciones
    console.log('\nüóÇÔ∏è 3. Verificando colecciones...');
    const collections = await db.listCollections().toArray();
    const requiredCollections = ['bookings', 'availableslots', 'users', 'advisoryschedules'];
    
    for (const collection of requiredCollections) {
      const exists = collections.some(col => col.name === collection);
      console.log(`${exists ? '‚úÖ' : '‚ùå'} Colecci√≥n ${collection}: ${exists ? 'existe' : 'NO existe'}`);
    }

    // 4. Verificar reservas existentes
    console.log('\nüìÖ 4. Verificando reservas existentes...');
    const bookings = await db.collection('bookings').find({}).toArray();
    console.log(`üìä Total de reservas: ${bookings.length}`);
    
    if (bookings.length > 0) {
      const recentBookings = bookings.slice(-5);
      console.log('üìã √öltimas 5 reservas:');
      recentBookings.forEach((booking, index) => {
        console.log(`  ${index + 1}. ${booking.type} - ${booking.userEmail} - ${booking.startDate} - Status: ${booking.status}`);
      });
    }

    // 5. Verificar slots disponibles
    console.log('\n‚è∞ 5. Verificando slots disponibles...');
    const availableSlots = await db.collection('availableslots').find({}).toArray();
    console.log(`üìä Total de slots: ${availableSlots.length}`);
    
    const availableCount = availableSlots.filter(slot => slot.available).length;
    const bookedCount = availableSlots.filter(slot => !slot.available).length;
    console.log(`‚úÖ Slots disponibles: ${availableCount}`);
    console.log(`üîí Slots reservados: ${bookedCount}`);

    // 6. Verificar horarios de asesor√≠a
    console.log('\nüìã 6. Verificando horarios de asesor√≠a...');
    const advisorySchedules = await db.collection('advisoryschedules').find({}).toArray();
    console.log(`üìä Total de horarios de asesor√≠a: ${advisorySchedules.length}`);

    await client.close();
  } catch (error) {
    console.log('‚ùå Error conectando a MongoDB:', error.message);
  }

  // 7. Verificar configuraci√≥n de email
  console.log('\nüìß 7. Verificando configuraci√≥n de email...');
  if (process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS) {
    console.log('‚úÖ Configuraci√≥n SMTP b√°sica presente');
    console.log(`üìß Host: ${process.env.SMTP_HOST}`);
    console.log(`üìß Usuario: ${process.env.SMTP_USER}`);
    console.log(`üìß Puerto: ${process.env.SMTP_PORT || '587'}`);
  } else {
    console.log('‚ùå Configuraci√≥n SMTP incompleta');
  }

  // 8. Verificar configuraci√≥n de Google Calendar
  console.log('\nüìÖ 8. Verificando configuraci√≥n de Google Calendar...');
  if (process.env.ADMIN_GOOGLE_ACCESS_TOKEN && process.env.ADMIN_GOOGLE_REFRESH_TOKEN) {
    console.log('‚úÖ Tokens de Google Calendar configurados');
    console.log(`üìÖ Calendar ID: ${process.env.GOOGLE_CALENDAR_ID || 'primary'}`);
  } else {
    console.log('‚ùå Tokens de Google Calendar faltantes');
    console.log('üí° Necesitas configurar ADMIN_GOOGLE_ACCESS_TOKEN y ADMIN_GOOGLE_REFRESH_TOKEN');
  }

  console.log('\nüîç Diagn√≥stico completado');
  console.log('\nüìã Resumen de problemas encontrados:');
  
  if (missingVars.length > 0) {
    console.log(`‚ùå Variables de entorno faltantes: ${missingVars.length}`);
  }
  
  if (!process.env.ADMIN_GOOGLE_ACCESS_TOKEN || !process.env.ADMIN_GOOGLE_REFRESH_TOKEN) {
    console.log('‚ùå Google Calendar no funcionar√° sin los tokens de admin');
  }
  
  if (!process.env.SMTP_HOST || !process.env.SMTP_USER || !process.env.SMTP_PASS) {
    console.log('‚ùå Emails no se enviar√°n sin configuraci√≥n SMTP');
  }
}

diagnoseBookingIssues().catch(console.error);
